# coding: utf-8

"""
    booklooker REST API

    <p>   Die <strong>Booklooker REST API</strong> ermöglicht die sichere und einfache Kommunikation mit verschiedenen   Booklooker-Schnittstellen. Es besteht die Möglichkeit, Artikel und Aufträge abzufragen, zu ändern, zu stornieren   etc. Auch der automatische Import neuer oder geänderter Artikel ist ohne Weiteres möglich. </p> <p>   Diese API basiert auf REST. Zur Benutzung führen Sie bitte die folgenden Schritte durch: </p> <ol>   <li>     Sie benötigen Ihren persönlichen <strong>API Key</strong>, diesen erhalten Sie im Bereich     <a href=\"https://www.booklooker.de/app/priv/api_key.php\">Persönliche Daten</a>   </li>   <li>     Benutzen Sie anschließend die Schnittstelle     <a href=\"https://www.booklooker.de/pages/api_authenticate.php\">authenticate</a>     via HTTP&nbsp;POST und Sie erhalten einen <strong>Token</strong>,     welcher für alle folgenden Aufrufe benötigt wird.     Sofern Sie 10&nbsp;Minuten keine Schnittstelle aufrufen,     verfällt der Token und Sie müssen sich erneut authentifizieren.   </li>   <li>     Verwenden Sie eine der unten aufgelisteten Schnittstellen.     Die Beschreibung jeder Schnittstelle enthält die benötigten Parameter und die möglichen Rückgabewerte.   </li> </ol> <p>   Zur Kommunikation können verschiedene Programmiersprachen zum Einsatz kommen. Wir stellen Ihnen hier ein   <a href=\"https://www.booklooker.de/pages/rest_api.php?do=download&filename=booklooker_rest_api.php&path=booklooker_rest_api.php\">Beispiel in PHP</a>   zur Verfügung. </p> <p>   Weiterhin bieten wir hier eine <a href=\"https://www.booklooker.de/download/openapi.yaml\">OpenAPI Spezifikation</a> an.  </p> 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr, field_validator

from typing import Any, Optional

from openapi_client.models.authenticate_post200_response import AuthenticatePost200Response

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OrderApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def order_cancel_put(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuthenticatePost200Response:
        """Stornieren einer kompletten Bestellung

        Stornieren einer kompletten Bestellung

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_cancel_put_serialize(
            order_id=order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_cancel_put_with_http_info(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuthenticatePost200Response]:
        """Stornieren einer kompletten Bestellung

        Stornieren einer kompletten Bestellung

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_cancel_put_serialize(
            order_id=order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_cancel_put_without_preload_content(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Stornieren einer kompletten Bestellung

        Stornieren einer kompletten Bestellung

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_cancel_put_serialize(
            order_id=order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_cancel_put_serialize(
        self,
        order_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/order_cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_get(
        self,
        order_id: Annotated[StrictInt, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        var_date: Annotated[Optional[StrictStr], Field(description="Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD. Wenn übergeben, hat dieser Parameter Vorrang vor dateFrom und dateTo ")] = None,
        date_from: Annotated[Optional[StrictStr], Field(description="Start-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD")] = None,
        date_to: Annotated[Optional[StrictStr], Field(description="End-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuthenticatePost200Response:
        """Download aller Bestellungen eines bestimmten Tages

        Download aller Bestellungen eines bestimmten Tages bzw. Zeitintervalls.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: int
        :param var_date: Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD. Wenn übergeben, hat dieser Parameter Vorrang vor dateFrom und dateTo 
        :type var_date: str
        :param date_from: Start-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD
        :type date_from: str
        :param date_to: End-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD
        :type date_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_serialize(
            order_id=order_id,
            var_date=var_date,
            date_from=date_from,
            date_to=date_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_get_with_http_info(
        self,
        order_id: Annotated[StrictInt, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        var_date: Annotated[Optional[StrictStr], Field(description="Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD. Wenn übergeben, hat dieser Parameter Vorrang vor dateFrom und dateTo ")] = None,
        date_from: Annotated[Optional[StrictStr], Field(description="Start-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD")] = None,
        date_to: Annotated[Optional[StrictStr], Field(description="End-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuthenticatePost200Response]:
        """Download aller Bestellungen eines bestimmten Tages

        Download aller Bestellungen eines bestimmten Tages bzw. Zeitintervalls.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: int
        :param var_date: Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD. Wenn übergeben, hat dieser Parameter Vorrang vor dateFrom und dateTo 
        :type var_date: str
        :param date_from: Start-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD
        :type date_from: str
        :param date_to: End-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD
        :type date_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_serialize(
            order_id=order_id,
            var_date=var_date,
            date_from=date_from,
            date_to=date_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_get_without_preload_content(
        self,
        order_id: Annotated[StrictInt, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        var_date: Annotated[Optional[StrictStr], Field(description="Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD. Wenn übergeben, hat dieser Parameter Vorrang vor dateFrom und dateTo ")] = None,
        date_from: Annotated[Optional[StrictStr], Field(description="Start-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD")] = None,
        date_to: Annotated[Optional[StrictStr], Field(description="End-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download aller Bestellungen eines bestimmten Tages

        Download aller Bestellungen eines bestimmten Tages bzw. Zeitintervalls.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: int
        :param var_date: Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD. Wenn übergeben, hat dieser Parameter Vorrang vor dateFrom und dateTo 
        :type var_date: str
        :param date_from: Start-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD
        :type date_from: str
        :param date_to: End-Datum, zu dem Bestellungen angefordert werden, im Format YYYY-MM-DD
        :type date_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_get_serialize(
            order_id=order_id,
            var_date=var_date,
            date_from=date_from,
            date_to=date_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_get_serialize(
        self,
        order_id,
        var_date,
        date_from,
        date_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if date_from is not None:
            
            _query_params.append(('dateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('dateTo', date_to))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_item_cancel_put(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        media_type: Annotated[int, Field(le=4, strict=True, ge=0, description="Medientyp, mögliche Werte, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuthenticatePost200Response:
        """Stornieren der Bestellung eines Einzelartikels

        Stornieren der Bestellung eines Einzelartikels

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param media_type: Medientyp, mögliche Werte, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul>  (required)
        :type media_type: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_item_cancel_put_serialize(
            order_id=order_id,
            media_type=media_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_item_cancel_put_with_http_info(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        media_type: Annotated[int, Field(le=4, strict=True, ge=0, description="Medientyp, mögliche Werte, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuthenticatePost200Response]:
        """Stornieren der Bestellung eines Einzelartikels

        Stornieren der Bestellung eines Einzelartikels

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param media_type: Medientyp, mögliche Werte, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul>  (required)
        :type media_type: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_item_cancel_put_serialize(
            order_id=order_id,
            media_type=media_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_item_cancel_put_without_preload_content(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        media_type: Annotated[int, Field(le=4, strict=True, ge=0, description="Medientyp, mögliche Werte, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Stornieren der Bestellung eines Einzelartikels

        Stornieren der Bestellung eines Einzelartikels

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param media_type: Medientyp, mögliche Werte, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul>  (required)
        :type media_type: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_item_cancel_put_serialize(
            order_id=order_id,
            media_type=media_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_item_cancel_put_serialize(
        self,
        order_id,
        media_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if media_type is not None:
            
            _query_params.append(('mediaType', media_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/order_item_cancel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_message_put(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        message_type: Annotated[StrictStr, Field(description="Typ der Nachricht, mögliche Werte: <ul class=\"defaultList\">   <li>PAYMENT_INFORMATION &middot; Zahlungsinformationen senden</li>   <li>PAYMENT_REMINDER &middot; Zahlungserinnerung senden</li>   <li>SHIPPING_NOTICE &middot; Versandmitteilung senden</li> </ul> ")],
        additional_text: Annotated[Optional[StrictStr], Field(description="Zusätzlicher Text, der in der Nachricht aufgenommen wird")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuthenticatePost200Response:
        """Versand einer Nachricht an den Kunden

        Versand einer Nachricht an den Kunden.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param message_type: Typ der Nachricht, mögliche Werte: <ul class=\"defaultList\">   <li>PAYMENT_INFORMATION &middot; Zahlungsinformationen senden</li>   <li>PAYMENT_REMINDER &middot; Zahlungserinnerung senden</li>   <li>SHIPPING_NOTICE &middot; Versandmitteilung senden</li> </ul>  (required)
        :type message_type: str
        :param additional_text: Zusätzlicher Text, der in der Nachricht aufgenommen wird
        :type additional_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_message_put_serialize(
            order_id=order_id,
            message_type=message_type,
            additional_text=additional_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_message_put_with_http_info(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        message_type: Annotated[StrictStr, Field(description="Typ der Nachricht, mögliche Werte: <ul class=\"defaultList\">   <li>PAYMENT_INFORMATION &middot; Zahlungsinformationen senden</li>   <li>PAYMENT_REMINDER &middot; Zahlungserinnerung senden</li>   <li>SHIPPING_NOTICE &middot; Versandmitteilung senden</li> </ul> ")],
        additional_text: Annotated[Optional[StrictStr], Field(description="Zusätzlicher Text, der in der Nachricht aufgenommen wird")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuthenticatePost200Response]:
        """Versand einer Nachricht an den Kunden

        Versand einer Nachricht an den Kunden.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param message_type: Typ der Nachricht, mögliche Werte: <ul class=\"defaultList\">   <li>PAYMENT_INFORMATION &middot; Zahlungsinformationen senden</li>   <li>PAYMENT_REMINDER &middot; Zahlungserinnerung senden</li>   <li>SHIPPING_NOTICE &middot; Versandmitteilung senden</li> </ul>  (required)
        :type message_type: str
        :param additional_text: Zusätzlicher Text, der in der Nachricht aufgenommen wird
        :type additional_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_message_put_serialize(
            order_id=order_id,
            message_type=message_type,
            additional_text=additional_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_message_put_without_preload_content(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        message_type: Annotated[StrictStr, Field(description="Typ der Nachricht, mögliche Werte: <ul class=\"defaultList\">   <li>PAYMENT_INFORMATION &middot; Zahlungsinformationen senden</li>   <li>PAYMENT_REMINDER &middot; Zahlungserinnerung senden</li>   <li>SHIPPING_NOTICE &middot; Versandmitteilung senden</li> </ul> ")],
        additional_text: Annotated[Optional[StrictStr], Field(description="Zusätzlicher Text, der in der Nachricht aufgenommen wird")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Versand einer Nachricht an den Kunden

        Versand einer Nachricht an den Kunden.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param message_type: Typ der Nachricht, mögliche Werte: <ul class=\"defaultList\">   <li>PAYMENT_INFORMATION &middot; Zahlungsinformationen senden</li>   <li>PAYMENT_REMINDER &middot; Zahlungserinnerung senden</li>   <li>SHIPPING_NOTICE &middot; Versandmitteilung senden</li> </ul>  (required)
        :type message_type: str
        :param additional_text: Zusätzlicher Text, der in der Nachricht aufgenommen wird
        :type additional_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_message_put_serialize(
            order_id=order_id,
            message_type=message_type,
            additional_text=additional_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_message_put_serialize(
        self,
        order_id,
        message_type,
        additional_text,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if message_type is not None:
            
            _query_params.append(('messageType', message_type))
            
        if additional_text is not None:
            
            _query_params.append(('additionalText', additional_text))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/order_message',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_status_put(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        status: Annotated[StrictStr, Field(description="<p>Neuer Status der Bestellung, mögliche Werte:</p>  <h4>Bei Verkäufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>WAITING_FOR_PAYMENT</td><td>Zahlung offen</td></tr>   <tr><td>READY_FOR_SHIPMENT</td><td>fertig zum Versand</td></tr>   <tr><td>SHIPPED_WAITING_FOR_PAYMENT</td><td>versendet, warte auf Zahlung</td></tr>   <tr><td>SHIPPED_AND_PAID</td><td>versendet &amp; bezahlt</td></tr>   <tr><td>BUYER_NO_REACTION</td><td>Kunde reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>              <p>   <strong>Achtung:</strong> Das Setzen des Status <strong>CANCELED</strong>   ist nicht gleichbedeutend mit dem Aufruf der Funktion   <q>order_item_cancel</q>. Der Status <strong>CANCELED</strong> dient lediglich der   Eigenorganisation des Verkäufers. Um eine Bestellung so zu   stornieren, dass keine Provision anfällt, *muss*   <q>order_item_cancel</q> aufgerufen werden. </p>  <h4>Bei Käufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>TO_BE_PAID</td><td>Zahlung offen</td></tr>   <tr><td>WAITING_FOR_SHIPMENT</td><td>warte auf Lieferung</td></tr>   <tr><td>PAID_WAITING_FOR_SHIPMENT</td><td>bezahlt, warte auf Lieferung</td></tr>   <tr><td>RECEIVED_AND_PAID</td><td>erhalten &amp; bezahlt </td></tr>   <tr><td>VENDOR_NO_REACTION</td><td>Verkäufer reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table> ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuthenticatePost200Response:
        """Setzen des Status einer Bestellung

        Setzen des Status einer Bestellung.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param status: <p>Neuer Status der Bestellung, mögliche Werte:</p>  <h4>Bei Verkäufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>WAITING_FOR_PAYMENT</td><td>Zahlung offen</td></tr>   <tr><td>READY_FOR_SHIPMENT</td><td>fertig zum Versand</td></tr>   <tr><td>SHIPPED_WAITING_FOR_PAYMENT</td><td>versendet, warte auf Zahlung</td></tr>   <tr><td>SHIPPED_AND_PAID</td><td>versendet &amp; bezahlt</td></tr>   <tr><td>BUYER_NO_REACTION</td><td>Kunde reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>              <p>   <strong>Achtung:</strong> Das Setzen des Status <strong>CANCELED</strong>   ist nicht gleichbedeutend mit dem Aufruf der Funktion   <q>order_item_cancel</q>. Der Status <strong>CANCELED</strong> dient lediglich der   Eigenorganisation des Verkäufers. Um eine Bestellung so zu   stornieren, dass keine Provision anfällt, *muss*   <q>order_item_cancel</q> aufgerufen werden. </p>  <h4>Bei Käufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>TO_BE_PAID</td><td>Zahlung offen</td></tr>   <tr><td>WAITING_FOR_SHIPMENT</td><td>warte auf Lieferung</td></tr>   <tr><td>PAID_WAITING_FOR_SHIPMENT</td><td>bezahlt, warte auf Lieferung</td></tr>   <tr><td>RECEIVED_AND_PAID</td><td>erhalten &amp; bezahlt </td></tr>   <tr><td>VENDOR_NO_REACTION</td><td>Verkäufer reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>  (required)
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_status_put_serialize(
            order_id=order_id,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_status_put_with_http_info(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        status: Annotated[StrictStr, Field(description="<p>Neuer Status der Bestellung, mögliche Werte:</p>  <h4>Bei Verkäufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>WAITING_FOR_PAYMENT</td><td>Zahlung offen</td></tr>   <tr><td>READY_FOR_SHIPMENT</td><td>fertig zum Versand</td></tr>   <tr><td>SHIPPED_WAITING_FOR_PAYMENT</td><td>versendet, warte auf Zahlung</td></tr>   <tr><td>SHIPPED_AND_PAID</td><td>versendet &amp; bezahlt</td></tr>   <tr><td>BUYER_NO_REACTION</td><td>Kunde reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>              <p>   <strong>Achtung:</strong> Das Setzen des Status <strong>CANCELED</strong>   ist nicht gleichbedeutend mit dem Aufruf der Funktion   <q>order_item_cancel</q>. Der Status <strong>CANCELED</strong> dient lediglich der   Eigenorganisation des Verkäufers. Um eine Bestellung so zu   stornieren, dass keine Provision anfällt, *muss*   <q>order_item_cancel</q> aufgerufen werden. </p>  <h4>Bei Käufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>TO_BE_PAID</td><td>Zahlung offen</td></tr>   <tr><td>WAITING_FOR_SHIPMENT</td><td>warte auf Lieferung</td></tr>   <tr><td>PAID_WAITING_FOR_SHIPMENT</td><td>bezahlt, warte auf Lieferung</td></tr>   <tr><td>RECEIVED_AND_PAID</td><td>erhalten &amp; bezahlt </td></tr>   <tr><td>VENDOR_NO_REACTION</td><td>Verkäufer reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table> ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuthenticatePost200Response]:
        """Setzen des Status einer Bestellung

        Setzen des Status einer Bestellung.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param status: <p>Neuer Status der Bestellung, mögliche Werte:</p>  <h4>Bei Verkäufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>WAITING_FOR_PAYMENT</td><td>Zahlung offen</td></tr>   <tr><td>READY_FOR_SHIPMENT</td><td>fertig zum Versand</td></tr>   <tr><td>SHIPPED_WAITING_FOR_PAYMENT</td><td>versendet, warte auf Zahlung</td></tr>   <tr><td>SHIPPED_AND_PAID</td><td>versendet &amp; bezahlt</td></tr>   <tr><td>BUYER_NO_REACTION</td><td>Kunde reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>              <p>   <strong>Achtung:</strong> Das Setzen des Status <strong>CANCELED</strong>   ist nicht gleichbedeutend mit dem Aufruf der Funktion   <q>order_item_cancel</q>. Der Status <strong>CANCELED</strong> dient lediglich der   Eigenorganisation des Verkäufers. Um eine Bestellung so zu   stornieren, dass keine Provision anfällt, *muss*   <q>order_item_cancel</q> aufgerufen werden. </p>  <h4>Bei Käufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>TO_BE_PAID</td><td>Zahlung offen</td></tr>   <tr><td>WAITING_FOR_SHIPMENT</td><td>warte auf Lieferung</td></tr>   <tr><td>PAID_WAITING_FOR_SHIPMENT</td><td>bezahlt, warte auf Lieferung</td></tr>   <tr><td>RECEIVED_AND_PAID</td><td>erhalten &amp; bezahlt </td></tr>   <tr><td>VENDOR_NO_REACTION</td><td>Verkäufer reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>  (required)
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_status_put_serialize(
            order_id=order_id,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_status_put_without_preload_content(
        self,
        order_id: Annotated[Any, Field(description="Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert. ")],
        status: Annotated[StrictStr, Field(description="<p>Neuer Status der Bestellung, mögliche Werte:</p>  <h4>Bei Verkäufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>WAITING_FOR_PAYMENT</td><td>Zahlung offen</td></tr>   <tr><td>READY_FOR_SHIPMENT</td><td>fertig zum Versand</td></tr>   <tr><td>SHIPPED_WAITING_FOR_PAYMENT</td><td>versendet, warte auf Zahlung</td></tr>   <tr><td>SHIPPED_AND_PAID</td><td>versendet &amp; bezahlt</td></tr>   <tr><td>BUYER_NO_REACTION</td><td>Kunde reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>              <p>   <strong>Achtung:</strong> Das Setzen des Status <strong>CANCELED</strong>   ist nicht gleichbedeutend mit dem Aufruf der Funktion   <q>order_item_cancel</q>. Der Status <strong>CANCELED</strong> dient lediglich der   Eigenorganisation des Verkäufers. Um eine Bestellung so zu   stornieren, dass keine Provision anfällt, *muss*   <q>order_item_cancel</q> aufgerufen werden. </p>  <h4>Bei Käufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>TO_BE_PAID</td><td>Zahlung offen</td></tr>   <tr><td>WAITING_FOR_SHIPMENT</td><td>warte auf Lieferung</td></tr>   <tr><td>PAID_WAITING_FOR_SHIPMENT</td><td>bezahlt, warte auf Lieferung</td></tr>   <tr><td>RECEIVED_AND_PAID</td><td>erhalten &amp; bezahlt </td></tr>   <tr><td>VENDOR_NO_REACTION</td><td>Verkäufer reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table> ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Setzen des Status einer Bestellung

        Setzen des Status einer Bestellung.

        :param order_id: Interne booklooker orderId der Bestellung, wird von der Schnittstelle <q>order</q> zurückgeliefert.  (required)
        :type order_id: object
        :param status: <p>Neuer Status der Bestellung, mögliche Werte:</p>  <h4>Bei Verkäufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>WAITING_FOR_PAYMENT</td><td>Zahlung offen</td></tr>   <tr><td>READY_FOR_SHIPMENT</td><td>fertig zum Versand</td></tr>   <tr><td>SHIPPED_WAITING_FOR_PAYMENT</td><td>versendet, warte auf Zahlung</td></tr>   <tr><td>SHIPPED_AND_PAID</td><td>versendet &amp; bezahlt</td></tr>   <tr><td>BUYER_NO_REACTION</td><td>Kunde reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>              <p>   <strong>Achtung:</strong> Das Setzen des Status <strong>CANCELED</strong>   ist nicht gleichbedeutend mit dem Aufruf der Funktion   <q>order_item_cancel</q>. Der Status <strong>CANCELED</strong> dient lediglich der   Eigenorganisation des Verkäufers. Um eine Bestellung so zu   stornieren, dass keine Provision anfällt, *muss*   <q>order_item_cancel</q> aufgerufen werden. </p>  <h4>Bei Käufen sind die folgenden Status möglich:</h4>  <table class=\"table-padding-5 grid\">   <tr><th>Rückgabewert</th><th>Bedeutung</th></tr>   <tr><td>TO_BE_PAID</td><td>Zahlung offen</td></tr>   <tr><td>WAITING_FOR_SHIPMENT</td><td>warte auf Lieferung</td></tr>   <tr><td>PAID_WAITING_FOR_SHIPMENT</td><td>bezahlt, warte auf Lieferung</td></tr>   <tr><td>RECEIVED_AND_PAID</td><td>erhalten &amp; bezahlt </td></tr>   <tr><td>VENDOR_NO_REACTION</td><td>Verkäufer reagiert nicht</td></tr>   <tr><td>CANCELED</td><td>storniert</td></tr> </table>  (required)
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_status_put_serialize(
            order_id=order_id,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_status_put_serialize(
        self,
        order_id,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/order_status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


