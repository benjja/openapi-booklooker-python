# coding: utf-8

"""
    booklooker REST API

    <p>   Die <strong>Booklooker REST API</strong> ermöglicht die sichere und einfache Kommunikation mit verschiedenen   Booklooker-Schnittstellen. Es besteht die Möglichkeit, Artikel und Aufträge abzufragen, zu ändern, zu stornieren   etc. Auch der automatische Import neuer oder geänderter Artikel ist ohne Weiteres möglich. </p> <p>   Diese API basiert auf REST. Zur Benutzung führen Sie bitte die folgenden Schritte durch: </p> <ol>   <li>     Sie benötigen Ihren persönlichen <strong>API Key</strong>, diesen erhalten Sie im Bereich     <a href=\"https://www.booklooker.de/app/priv/api_key.php\">Persönliche Daten</a>   </li>   <li>     Benutzen Sie anschließend die Schnittstelle     <a href=\"https://www.booklooker.de/pages/api_authenticate.php\">authenticate</a>     via HTTP&nbsp;POST und Sie erhalten einen <strong>Token</strong>,     welcher für alle folgenden Aufrufe benötigt wird.     Sofern Sie 10&nbsp;Minuten keine Schnittstelle aufrufen,     verfällt der Token und Sie müssen sich erneut authentifizieren.   </li>   <li>     Verwenden Sie eine der unten aufgelisteten Schnittstellen.     Die Beschreibung jeder Schnittstelle enthält die benötigten Parameter und die möglichen Rückgabewerte.   </li> </ol> <p>   Zur Kommunikation können verschiedene Programmiersprachen zum Einsatz kommen. Wir stellen Ihnen hier ein   <a href=\"https://www.booklooker.de/pages/rest_api.php?do=download&filename=booklooker_rest_api.php&path=booklooker_rest_api.php\">Beispiel in PHP</a>   zur Verfügung. </p> <p>   Weiterhin bieten wir hier eine <a href=\"https://www.booklooker.de/download/openapi.yaml\">OpenAPI Spezifikation</a> an.  </p> 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBytes, StrictInt, StrictStr, field_validator

from typing import Optional, Union

from openapi_client.models.authenticate_post200_response import AuthenticatePost200Response

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class UploadApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def file_import_post(
        self,
        file_type: Annotated[Optional[StrictStr], Field(description="Dateityp, mögliche Werte: <ul class=\"defaultList\">   <li>pic &middot; Bild-Datei</li>   <li>article &middot; Angebots-Datei</li> </ul> ")] = None,
        data_type: Annotated[Optional[Annotated[int, Field(le=2, strict=True, ge=0)]], Field(description="Art des Uploads, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Hinzufügen/ändern/Löschen</li>   <li>1 &middot; Ersetzen</li>   <li>2 &middot; Löschen</li> </ul> ")] = None,
        media_type: Annotated[Optional[Annotated[int, Field(le=4, strict=True, ge=0)]], Field(description="Medientyp, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> ")] = None,
        format_id: Annotated[Optional[StrictInt], Field(description="Interne ID des Formats, legt Feld-Reihenfolge und Text-Trenner fest. Für das booklooker-Format verwenden Sie bitte den Wert <q>1</q>, für mehr Informationen wenden Sie sich bitte an daten@booklooker.de ")] = None,
        encoding: Annotated[Optional[StrictStr], Field(description="Character Encoding der Datei (wenn nicht ISO8859-1 / Latin1), mögliche Werte: <ul class=\"defaultList\">   <li>IBMPC/CR (= CP437)</li>   <li>macintosh (= Mac OS Roman)</li>   <li>UTF-8</li> </ul> ")] = None,
        body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="<p>   Die hochzuladende Datei. </p> <p>   Ihre Angebotsdatei können Sie entweder als Textdatei oder als komprimiertes ZIP-Archiv übergeben.   Standardmäßig müssen die Textdateien in der Kodierung <q>ISO 8859-1</q> vorliegen.   Wenn Ihre Daten in einer anderen Kodierung, bspw. <q>UTF-8</q> vorliegen,   verwenden Sie sich bitte den Parameter <q>encoding</q>. </p> <p>   Bild-Dateien müssen als ZIP-Archiv übergeben werden.   Weitere Hinweise finden Sie auf der Seite zum   <a href=\"https://www.booklooker.de/app/priv/upload/upload_pic.php\">manuellen Hochladen</a>.   Die hochgeladenen Dateien werden in der Reihenfolge des Uploads verarbeitet. </p> <p>   Maximale Dateigröße: 80 MB. </p> ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuthenticatePost200Response:
        """Upload von Angebots- oder Bild-Dateien

        Upload von Angebots- oder Bild-Dateien.

        :param file_type: Dateityp, mögliche Werte: <ul class=\"defaultList\">   <li>pic &middot; Bild-Datei</li>   <li>article &middot; Angebots-Datei</li> </ul> 
        :type file_type: str
        :param data_type: Art des Uploads, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Hinzufügen/ändern/Löschen</li>   <li>1 &middot; Ersetzen</li>   <li>2 &middot; Löschen</li> </ul> 
        :type data_type: int
        :param media_type: Medientyp, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> 
        :type media_type: int
        :param format_id: Interne ID des Formats, legt Feld-Reihenfolge und Text-Trenner fest. Für das booklooker-Format verwenden Sie bitte den Wert <q>1</q>, für mehr Informationen wenden Sie sich bitte an daten@booklooker.de 
        :type format_id: int
        :param encoding: Character Encoding der Datei (wenn nicht ISO8859-1 / Latin1), mögliche Werte: <ul class=\"defaultList\">   <li>IBMPC/CR (= CP437)</li>   <li>macintosh (= Mac OS Roman)</li>   <li>UTF-8</li> </ul> 
        :type encoding: str
        :param body: <p>   Die hochzuladende Datei. </p> <p>   Ihre Angebotsdatei können Sie entweder als Textdatei oder als komprimiertes ZIP-Archiv übergeben.   Standardmäßig müssen die Textdateien in der Kodierung <q>ISO 8859-1</q> vorliegen.   Wenn Ihre Daten in einer anderen Kodierung, bspw. <q>UTF-8</q> vorliegen,   verwenden Sie sich bitte den Parameter <q>encoding</q>. </p> <p>   Bild-Dateien müssen als ZIP-Archiv übergeben werden.   Weitere Hinweise finden Sie auf der Seite zum   <a href=\"https://www.booklooker.de/app/priv/upload/upload_pic.php\">manuellen Hochladen</a>.   Die hochgeladenen Dateien werden in der Reihenfolge des Uploads verarbeitet. </p> <p>   Maximale Dateigröße: 80 MB. </p> 
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._file_import_post_serialize(
            file_type=file_type,
            data_type=data_type,
            media_type=media_type,
            format_id=format_id,
            encoding=encoding,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def file_import_post_with_http_info(
        self,
        file_type: Annotated[Optional[StrictStr], Field(description="Dateityp, mögliche Werte: <ul class=\"defaultList\">   <li>pic &middot; Bild-Datei</li>   <li>article &middot; Angebots-Datei</li> </ul> ")] = None,
        data_type: Annotated[Optional[Annotated[int, Field(le=2, strict=True, ge=0)]], Field(description="Art des Uploads, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Hinzufügen/ändern/Löschen</li>   <li>1 &middot; Ersetzen</li>   <li>2 &middot; Löschen</li> </ul> ")] = None,
        media_type: Annotated[Optional[Annotated[int, Field(le=4, strict=True, ge=0)]], Field(description="Medientyp, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> ")] = None,
        format_id: Annotated[Optional[StrictInt], Field(description="Interne ID des Formats, legt Feld-Reihenfolge und Text-Trenner fest. Für das booklooker-Format verwenden Sie bitte den Wert <q>1</q>, für mehr Informationen wenden Sie sich bitte an daten@booklooker.de ")] = None,
        encoding: Annotated[Optional[StrictStr], Field(description="Character Encoding der Datei (wenn nicht ISO8859-1 / Latin1), mögliche Werte: <ul class=\"defaultList\">   <li>IBMPC/CR (= CP437)</li>   <li>macintosh (= Mac OS Roman)</li>   <li>UTF-8</li> </ul> ")] = None,
        body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="<p>   Die hochzuladende Datei. </p> <p>   Ihre Angebotsdatei können Sie entweder als Textdatei oder als komprimiertes ZIP-Archiv übergeben.   Standardmäßig müssen die Textdateien in der Kodierung <q>ISO 8859-1</q> vorliegen.   Wenn Ihre Daten in einer anderen Kodierung, bspw. <q>UTF-8</q> vorliegen,   verwenden Sie sich bitte den Parameter <q>encoding</q>. </p> <p>   Bild-Dateien müssen als ZIP-Archiv übergeben werden.   Weitere Hinweise finden Sie auf der Seite zum   <a href=\"https://www.booklooker.de/app/priv/upload/upload_pic.php\">manuellen Hochladen</a>.   Die hochgeladenen Dateien werden in der Reihenfolge des Uploads verarbeitet. </p> <p>   Maximale Dateigröße: 80 MB. </p> ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuthenticatePost200Response]:
        """Upload von Angebots- oder Bild-Dateien

        Upload von Angebots- oder Bild-Dateien.

        :param file_type: Dateityp, mögliche Werte: <ul class=\"defaultList\">   <li>pic &middot; Bild-Datei</li>   <li>article &middot; Angebots-Datei</li> </ul> 
        :type file_type: str
        :param data_type: Art des Uploads, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Hinzufügen/ändern/Löschen</li>   <li>1 &middot; Ersetzen</li>   <li>2 &middot; Löschen</li> </ul> 
        :type data_type: int
        :param media_type: Medientyp, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> 
        :type media_type: int
        :param format_id: Interne ID des Formats, legt Feld-Reihenfolge und Text-Trenner fest. Für das booklooker-Format verwenden Sie bitte den Wert <q>1</q>, für mehr Informationen wenden Sie sich bitte an daten@booklooker.de 
        :type format_id: int
        :param encoding: Character Encoding der Datei (wenn nicht ISO8859-1 / Latin1), mögliche Werte: <ul class=\"defaultList\">   <li>IBMPC/CR (= CP437)</li>   <li>macintosh (= Mac OS Roman)</li>   <li>UTF-8</li> </ul> 
        :type encoding: str
        :param body: <p>   Die hochzuladende Datei. </p> <p>   Ihre Angebotsdatei können Sie entweder als Textdatei oder als komprimiertes ZIP-Archiv übergeben.   Standardmäßig müssen die Textdateien in der Kodierung <q>ISO 8859-1</q> vorliegen.   Wenn Ihre Daten in einer anderen Kodierung, bspw. <q>UTF-8</q> vorliegen,   verwenden Sie sich bitte den Parameter <q>encoding</q>. </p> <p>   Bild-Dateien müssen als ZIP-Archiv übergeben werden.   Weitere Hinweise finden Sie auf der Seite zum   <a href=\"https://www.booklooker.de/app/priv/upload/upload_pic.php\">manuellen Hochladen</a>.   Die hochgeladenen Dateien werden in der Reihenfolge des Uploads verarbeitet. </p> <p>   Maximale Dateigröße: 80 MB. </p> 
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._file_import_post_serialize(
            file_type=file_type,
            data_type=data_type,
            media_type=media_type,
            format_id=format_id,
            encoding=encoding,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def file_import_post_without_preload_content(
        self,
        file_type: Annotated[Optional[StrictStr], Field(description="Dateityp, mögliche Werte: <ul class=\"defaultList\">   <li>pic &middot; Bild-Datei</li>   <li>article &middot; Angebots-Datei</li> </ul> ")] = None,
        data_type: Annotated[Optional[Annotated[int, Field(le=2, strict=True, ge=0)]], Field(description="Art des Uploads, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Hinzufügen/ändern/Löschen</li>   <li>1 &middot; Ersetzen</li>   <li>2 &middot; Löschen</li> </ul> ")] = None,
        media_type: Annotated[Optional[Annotated[int, Field(le=4, strict=True, ge=0)]], Field(description="Medientyp, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> ")] = None,
        format_id: Annotated[Optional[StrictInt], Field(description="Interne ID des Formats, legt Feld-Reihenfolge und Text-Trenner fest. Für das booklooker-Format verwenden Sie bitte den Wert <q>1</q>, für mehr Informationen wenden Sie sich bitte an daten@booklooker.de ")] = None,
        encoding: Annotated[Optional[StrictStr], Field(description="Character Encoding der Datei (wenn nicht ISO8859-1 / Latin1), mögliche Werte: <ul class=\"defaultList\">   <li>IBMPC/CR (= CP437)</li>   <li>macintosh (= Mac OS Roman)</li>   <li>UTF-8</li> </ul> ")] = None,
        body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="<p>   Die hochzuladende Datei. </p> <p>   Ihre Angebotsdatei können Sie entweder als Textdatei oder als komprimiertes ZIP-Archiv übergeben.   Standardmäßig müssen die Textdateien in der Kodierung <q>ISO 8859-1</q> vorliegen.   Wenn Ihre Daten in einer anderen Kodierung, bspw. <q>UTF-8</q> vorliegen,   verwenden Sie sich bitte den Parameter <q>encoding</q>. </p> <p>   Bild-Dateien müssen als ZIP-Archiv übergeben werden.   Weitere Hinweise finden Sie auf der Seite zum   <a href=\"https://www.booklooker.de/app/priv/upload/upload_pic.php\">manuellen Hochladen</a>.   Die hochgeladenen Dateien werden in der Reihenfolge des Uploads verarbeitet. </p> <p>   Maximale Dateigröße: 80 MB. </p> ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload von Angebots- oder Bild-Dateien

        Upload von Angebots- oder Bild-Dateien.

        :param file_type: Dateityp, mögliche Werte: <ul class=\"defaultList\">   <li>pic &middot; Bild-Datei</li>   <li>article &middot; Angebots-Datei</li> </ul> 
        :type file_type: str
        :param data_type: Art des Uploads, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Hinzufügen/ändern/Löschen</li>   <li>1 &middot; Ersetzen</li>   <li>2 &middot; Löschen</li> </ul> 
        :type data_type: int
        :param media_type: Medientyp, mögliche Werte: <ul class=\"defaultList\">   <li>0 &middot; Bücher</li>   <li>1 &middot; Filme</li>   <li>2 &middot; Musik</li>   <li>3 &middot; Hörbücher</li>   <li>4 &middot; Spiele</li> </ul> 
        :type media_type: int
        :param format_id: Interne ID des Formats, legt Feld-Reihenfolge und Text-Trenner fest. Für das booklooker-Format verwenden Sie bitte den Wert <q>1</q>, für mehr Informationen wenden Sie sich bitte an daten@booklooker.de 
        :type format_id: int
        :param encoding: Character Encoding der Datei (wenn nicht ISO8859-1 / Latin1), mögliche Werte: <ul class=\"defaultList\">   <li>IBMPC/CR (= CP437)</li>   <li>macintosh (= Mac OS Roman)</li>   <li>UTF-8</li> </ul> 
        :type encoding: str
        :param body: <p>   Die hochzuladende Datei. </p> <p>   Ihre Angebotsdatei können Sie entweder als Textdatei oder als komprimiertes ZIP-Archiv übergeben.   Standardmäßig müssen die Textdateien in der Kodierung <q>ISO 8859-1</q> vorliegen.   Wenn Ihre Daten in einer anderen Kodierung, bspw. <q>UTF-8</q> vorliegen,   verwenden Sie sich bitte den Parameter <q>encoding</q>. </p> <p>   Bild-Dateien müssen als ZIP-Archiv übergeben werden.   Weitere Hinweise finden Sie auf der Seite zum   <a href=\"https://www.booklooker.de/app/priv/upload/upload_pic.php\">manuellen Hochladen</a>.   Die hochgeladenen Dateien werden in der Reihenfolge des Uploads verarbeitet. </p> <p>   Maximale Dateigröße: 80 MB. </p> 
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._file_import_post_serialize(
            file_type=file_type,
            data_type=data_type,
            media_type=media_type,
            format_id=format_id,
            encoding=encoding,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _file_import_post_serialize(
        self,
        file_type,
        data_type,
        media_type,
        format_id,
        encoding,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if file_type is not None:
            
            _query_params.append(('fileType', file_type))
            
        if data_type is not None:
            
            _query_params.append(('dataType', data_type))
            
        if media_type is not None:
            
            _query_params.append(('mediaType', media_type))
            
        if format_id is not None:
            
            _query_params.append(('formatID', format_id))
            
        if encoding is not None:
            
            _query_params.append(('encoding', encoding))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with io.open(body, "rb") as _fp:
                    _body_params = _fp.read()
            else:
                _body_params = body


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/octet-stream'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/file_import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def file_status_get(
        self,
        filename: Annotated[StrictStr, Field(description="Name der hochgeladenen Datei. Existieren mehrere hochgeladene Dateien mit diesem Namen, bezieht sich der zurückgegebene Wert auf die zuletzt hochgeladene Datei. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuthenticatePost200Response:
        """Abfragen des Status einer hochgeladenen Angebotsdatei

        Abfragen des Status einer hochgeladenen Angebotsdatei

        :param filename: Name der hochgeladenen Datei. Existieren mehrere hochgeladene Dateien mit diesem Namen, bezieht sich der zurückgegebene Wert auf die zuletzt hochgeladene Datei.  (required)
        :type filename: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._file_status_get_serialize(
            filename=filename,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def file_status_get_with_http_info(
        self,
        filename: Annotated[StrictStr, Field(description="Name der hochgeladenen Datei. Existieren mehrere hochgeladene Dateien mit diesem Namen, bezieht sich der zurückgegebene Wert auf die zuletzt hochgeladene Datei. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuthenticatePost200Response]:
        """Abfragen des Status einer hochgeladenen Angebotsdatei

        Abfragen des Status einer hochgeladenen Angebotsdatei

        :param filename: Name der hochgeladenen Datei. Existieren mehrere hochgeladene Dateien mit diesem Namen, bezieht sich der zurückgegebene Wert auf die zuletzt hochgeladene Datei.  (required)
        :type filename: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._file_status_get_serialize(
            filename=filename,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def file_status_get_without_preload_content(
        self,
        filename: Annotated[StrictStr, Field(description="Name der hochgeladenen Datei. Existieren mehrere hochgeladene Dateien mit diesem Namen, bezieht sich der zurückgegebene Wert auf die zuletzt hochgeladene Datei. ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Abfragen des Status einer hochgeladenen Angebotsdatei

        Abfragen des Status einer hochgeladenen Angebotsdatei

        :param filename: Name der hochgeladenen Datei. Existieren mehrere hochgeladene Dateien mit diesem Namen, bezieht sich der zurückgegebene Wert auf die zuletzt hochgeladene Datei.  (required)
        :type filename: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._file_status_get_serialize(
            filename=filename,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _file_status_get_serialize(
        self,
        filename,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filename is not None:
            
            _query_params.append(('filename', filename))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/file_status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def import_status_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuthenticatePost200Response:
        """Abfragen der Anzahl unverarbeiteter hochgeladener Angebotsdateien

        Abfragen der Anzahl unverarbeiteter hochgeladener Angebotsdateien.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._import_status_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def import_status_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuthenticatePost200Response]:
        """Abfragen der Anzahl unverarbeiteter hochgeladener Angebotsdateien

        Abfragen der Anzahl unverarbeiteter hochgeladener Angebotsdateien.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._import_status_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def import_status_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Abfragen der Anzahl unverarbeiteter hochgeladener Angebotsdateien

        Abfragen der Anzahl unverarbeiteter hochgeladener Angebotsdateien.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._import_status_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuthenticatePost200Response"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _import_status_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/import_status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


